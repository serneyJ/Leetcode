class Solution {
  private:

  public:
    void dfs(vector<int>& candidates, int target, vector<vector<int>>& res,
             vector<int>& nowvec) {

        if (target == 0) {
            res.emplace_back(nowvec);
            return;
        }

        for (int i = 0; i < candidates.size(); i++) {
            if (target - candidates[i] >= 0) {
                nowvec.push_back(candidates[i]);
                dfs(candidates, target - candidates[i], res, nowvec);
                nowvec.pop_back();
            }
        }

    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        set<vector<int>> s;
        vector<int> v0;
        vector<vector<int>> v1;
        dfs(candidates, target, v1, v0);
        for (vector v : v1) {
            sort(v.begin(), v.end());
            s.insert(v);
        }
        v1.assign(s.begin(), s.end());
        return v1;
    }
};
